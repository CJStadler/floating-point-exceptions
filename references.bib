
@article{barr_automatic_2013,
	title = {Automatic Detection of Floating-Point Exceptions},
	abstract = {It is well-known that ﬂoating-point exceptions can be disastrous and writing exception-free numerical programs is very difﬁcult. Thus, it is important to automatically detect such errors. In this paper, we present Ariadne, a practical symbolic execution system speciﬁcally designed and implemented for detecting ﬂoating-point exceptions. Ariadne systematically transforms a numerical program to explicitly check each exception triggering condition. Ariadne symbolically executes the transformed program using real arithmetic to ﬁnd candidate real-valued inputs that can reach and trigger an exception. Ariadne converts each candidate input into a ﬂoating-point number, then tests it against the original program. In general, approximating ﬂoating-point arithmetic with real arithmetic can change paths from feasible to infeasible and vice versa. The key insight of this work is that, for the problem of detecting ﬂoating-point exceptions, this approximation works well in practice because, if one input reaches an exception, many are likely to, and at least one of them will do so over both ﬂoating-point and real arithmetic. To realize Ariadne, we also devised a novel, practical linearization technique to solve nonlinear constraints. We extensively evaluated Ariadne over 467 scalar functions in the widely used {GNU} Scientiﬁc Library ({GSL}). Our results show that Ariadne is practical and identiﬁes a large number of real runtime exceptions in {GSL}. The {GSL} developers conﬁrmed our preliminary ﬁndings and look forward to Ariadne’s public release, which we plan to do in the near future.},
	pages = {12},
	journaltitle = {{POPL}},
	author = {Barr, Earl T and Vo, Thanh and Le, Vu and Su, Zhendong},
	date = {2013},
	langid = {english},
	file = {Barr et al. - Automatic Detection of Floating-Point Exceptions.pdf:/home/chris/Zotero/storage/SHYLWPNG/Barr et al. - Automatic Detection of Floating-Point Exceptions.pdf:application/pdf}
}